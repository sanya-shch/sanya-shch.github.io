{"version":3,"sources":["Utils/index.js","redux/actions/tableActions.js","redux/actions/types.js","components/Form.js","redux/selectors/getCellAmount.js","redux/selectors/getTableCellAverageValueInColumn.js","redux/selectors/getRowSum.js","redux/selectors/getIsCloseValue.js","redux/selectors/getCellPercent.js","components/TableCell.js","components/TableCellBtn.js","components/TableCellAverageValueInColumn.js","components/TableCellSumOfRow.js","components/Table.js","App.js","redux/reducers/tableReducer.js","redux/reducers/index.js","redux/store.js","serviceWorker.js","index.js"],"names":["fillRow","N","id","amount","rows","table","j","Math","round","random","toString","ID","Amount","push","sumRow","sumValue","setM","m","type","payload","connect","state","M","X","setX","x","setN","n","setTable","dispatch","row","i","Object","assign","rowArr","avarageValue","columnArr","tableSumOfColumns","Value","averageColumn","handleChange","e","target","name","value","onSubmit","preventDefault","className","min","onChange","getCellAmount","getTableCellAverageValueInColumn","index","sumOfColumns","getRowSum","sumOfRows","length","getIsCloseValue","arrayOfCloseValue","getCellPercent","arrayOfRowPercent","TableCell","nextProps","nextState","this","props","percentValue","isClose","cellAmount","prevProps","prevState","console","log","onclick","onmouseover","onClick","onMouseOver","percent","style","height","React","Component","item","memo","classnames","TableCellAverageValueInColumn","cellValue","TableCellSumOfRow","sum","onmouseout","onMouseOut","deleteRow","getState","newRow","newTable","filter","rowIndex","addRow","addAmount","indexC","newRows","setRowPercentArr","rowPercentArr","setCloseValue","closeValues","current","closestLeft","closestRight","indexLeft","indexRight","number","data","values","result","abs","splice","findCloseValue","handleOnmouseLeaveSum","map","key","idx","handleClickAddAmount","handleOnmouseOverSum","handleClickDelete","App","initialState","combineReducers","action","cells","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fca6d8d6.chunk.js","sourcesContent":["export const fillRow = (N) => {\r\n  let id, amount, rows = {}, table = [];\r\n  for (let j = 0; j < N; j++) {\r\n    id = `f${(Math.round(Math.random()*1e8)).toString(16)}`;\r\n    amount = Math.round(Math.random() * 999);\r\n    rows[id] = {ID: id, Amount: amount};\r\n    table.push(id);\r\n  }\r\n  return {rows, table}\r\n};\r\n\r\nexport const sumRow = (table, rows, N) => {\r\n  let sumValue = 0;\r\n  for (let j = 0; j < N; j++) {\r\n    sumValue += rows[table[j]].Amount\r\n  }\r\n  return sumValue\r\n};\r\n\r\nexport const averageColumn = (table, rows, M, N) => {\r\n  const columnArr = {}, tableSumOfColumns = [];\r\n  for (let i = 0, avarageValue, id; i < N; i++) {\r\n    avarageValue = 0;\r\n\r\n    for (let j = 0; j < M; j++) {\r\n      avarageValue += rows[table[j][i]].Amount\r\n    }\r\n\r\n    id = `f${(Math.round(Math.random()*1e8)).toString(16)}`;\r\n    columnArr[id] = {ID: id, Value: avarageValue};\r\n    tableSumOfColumns.push(id);\r\n  }\r\n  return {columnArr, tableSumOfColumns}\r\n};\r\n\r\n// export const findCloseValue = (table, X, item) => (\r\n//   Object.entries(table)\r\n//     .map(([k, v]) => ({...v, Amount: Math.abs(v.Amount - item.Amount)}) )\r\n//     .sort((a, b) => a.Amount-b.Amount)\r\n//     .slice(0, X+1)\r\n// );\r\n\r\nexport const findCloseValue = (table, X, item) => {\r\n  let closestLeft = null,\r\n    closestRight = null,\r\n    indexLeft = null,\r\n    indexRight = null,\r\n    number = item.Amount,\r\n    current,\r\n    data = Object.values(table);\r\n  const result = {};\r\n\r\n  for (let j = 0; j < X; j++) {\r\n    for (let i = 0; i < data.length; i++) {\r\n      current = data[i];\r\n      if (current.Amount < number && (closestLeft === null || closestLeft.Amount < current.Amount)) {\r\n        closestLeft = current;\r\n        indexLeft = i;\r\n      } else if (current.Amount > number && (closestRight === null || closestRight.Amount > current.Amount)) {\r\n        closestRight = current;\r\n        indexRight = i;\r\n      } else if (current.Amount === number) {\r\n        closestLeft = current;\r\n        indexLeft = i;\r\n        break;\r\n      }\r\n    }\r\n    if (closestLeft !== null && closestRight !== null) {\r\n      if (Math.abs(closestLeft.Amount-number) < Math.abs(closestRight.Amount-number)) {\r\n        result[closestLeft.ID] = closestLeft;\r\n        data.splice(indexLeft, 1)\r\n      } else {\r\n        result[closestRight.ID] = closestRight;\r\n        data.splice(indexRight, 1)\r\n      }\r\n    } else if (closestLeft === null && closestRight !== null) {\r\n      result[closestRight.ID] = closestRight;\r\n      data.splice(indexRight, 1);\r\n    } else if (closestLeft !== null && closestRight === null) {\r\n      result[closestLeft.ID] = closestLeft;\r\n      data.splice(indexLeft, 1);\r\n    }\r\n    closestLeft = null;\r\n    closestRight = null;\r\n    indexLeft = null;\r\n    indexRight = null;\r\n  }\r\n// console.log(result)\r\n  return result\r\n};","import {\r\n  SET_M,\r\n  SET_N,\r\n  SET_X,\r\n  SET_TABLE,\r\n  ADD_ROW,\r\n  DELETE_ROW,\r\n  ADD_AMOUNT,\r\n  SET_ROW_PERCENT_ARR,\r\n  SET_CLOSE_VALUES_ARR,\r\n  SET_ROW_SUM,\r\n  SET_COLUMN_SUM\r\n} from './types';\r\n\r\nimport {\r\n  fillRow,\r\n  sumRow,\r\n  averageColumn,\r\n  findCloseValue\r\n} from \"../../Utils\";\r\n\r\nexport const setTable = ( M, N ) => dispatch => {\r\n  const table = [];\r\n  let rows = {};\r\n\r\n  for (let i = 0, row; i < M; i++) {\r\n    row = fillRow(N);\r\n    table.push(row.table);\r\n    rows = Object.assign(rows, row.rows);\r\n  }\r\n\r\n  dispatch({\r\n    type: SET_TABLE,\r\n    payload: {\r\n      table,\r\n      rows\r\n    }\r\n  });\r\n\r\n  const rowArr = [];\r\n\r\n  for (let i = 0; i < M; i++) {\r\n    rowArr.push(sumRow(table[i], rows, N));\r\n  }\r\n\r\n  dispatch({\r\n    type: SET_ROW_SUM,\r\n    payload: rowArr\r\n  });\r\n\r\n  const {columnArr, tableSumOfColumns} = averageColumn(table, rows, M, N);\r\n\r\n  dispatch({\r\n    type: SET_COLUMN_SUM,\r\n    payload: {\r\n      tableSumOfColumns,\r\n      columnArr\r\n    }\r\n  });\r\n};\r\n\r\nexport const addRow = () => (dispatch, getState) => {\r\n  const { table, rows,  sumOfRows, sumOfColumns, tableSumOfColumns, M, N } = getState().table;\r\n\r\n  const newTable = Object.assign([], table);\r\n  let newRow = Object.assign({}, rows);\r\n\r\n  const row = fillRow(N);\r\n  newTable.push(row.table);\r\n  newRow = Object.assign(newRow, row.rows);\r\n\r\n  const rowArr = Object.assign([], sumOfRows);\r\n  rowArr.push(sumRow(row.table, newRow, N));\r\n\r\n  const columnArr = Object.assign([], sumOfColumns);\r\n\r\n  for (let i = 0; i < N; i++) {\r\n    columnArr[tableSumOfColumns[i]].Value += row.rows[row.table[i]].Amount\r\n  }\r\n\r\n  dispatch(setM(M*1 + 1));\r\n\r\n  dispatch({\r\n    type: ADD_ROW,\r\n    payload: {\r\n      newTable,\r\n      newRow,\r\n      rowArr,\r\n      columnArr\r\n    }\r\n  });\r\n};\r\n\r\nexport const deleteRow = (index) => (dispatch, getState) => {\r\n  const { table, rows, sumOfRows, sumOfColumns, tableSumOfColumns, M, N } = getState().table;\r\n\r\n  let newRow = Object.assign({}, rows);\r\n\r\n  const columnArr = Object.assign([], sumOfColumns);\r\n\r\n  for (let i = 0; i < N; i++) {\r\n    columnArr[tableSumOfColumns[i]].Value -= newRow[table[index][i]].Amount\r\n  }\r\n\r\n  const newTable = table.filter((row, rowIndex) => rowIndex !== index);\r\n\r\n  const rowArr = sumOfRows.filter((row, rowIndex) => rowIndex !== index);\r\n\r\n  dispatch(setM(M-1));\r\n\r\n  dispatch({\r\n    type: DELETE_ROW,\r\n    payload: {\r\n      newTable,\r\n      newRow,\r\n      rowArr,\r\n      columnArr\r\n    }\r\n  });\r\n};\r\n\r\nexport const addAmount = (index, indexC, id) => (dispatch, getState) => {\r\n  const { rows, sumOfRows, sumOfColumns } = getState().table;\r\n\r\n  const newRows = Object.assign({}, rows);\r\n  newRows[id].Amount++;\r\n\r\n  const rowArr = Object.assign([], sumOfRows);\r\n  rowArr[index]++;\r\n\r\n  const columnArr = Object.assign([], sumOfColumns);\r\n  columnArr[indexC].Value++;\r\n\r\n  dispatch({\r\n    type: ADD_AMOUNT,\r\n    payload: {\r\n      rows: newRows,\r\n      rowArr,\r\n      columnArr\r\n    }\r\n  })\r\n};\r\n\r\nexport const setCloseValue = (id) => (dispatch, getState) => {\r\n  let closeValues = {};\r\n\r\n  if (id !== null) {\r\n    const { rows, X } = getState().table;\r\n\r\n    closeValues = findCloseValue(rows, X*1, rows[id]);\r\n  }\r\n\r\n  dispatch({\r\n    type: SET_CLOSE_VALUES_ARR,\r\n    payload: closeValues\r\n  })\r\n};\r\n\r\nexport const setRowPercentArr = (index, table) => (dispatch, getState) => {\r\n  const rowPercentArr = {};\r\n\r\n  if (index !== null) {\r\n    const sum = getState().table.sumOfRows[index];\r\n    const rows = getState().table.rows;\r\n\r\n    for (let i = 0; i < table.length; i++){\r\n      rowPercentArr[table[i]] = {percent: Math.round(100 * rows[table[i]].Amount / sum * 100) / 100 + '%'};\r\n    }\r\n  }\r\n\r\n  dispatch({\r\n    type: SET_ROW_PERCENT_ARR,\r\n    payload: rowPercentArr\r\n  });\r\n};\r\n\r\nexport const setM = (m) => {\r\n  return {\r\n    type: SET_M,\r\n    payload: m\r\n  };\r\n};\r\n\r\nexport const setN = (n) => {\r\n  return {\r\n    type: SET_N,\r\n    payload: n\r\n  };\r\n};\r\n\r\nexport const setX = (x) => {\r\n  return {\r\n    type: SET_X,\r\n    payload: x\r\n  };\r\n};","export const SET_TABLE = 'SET_TABLE';\r\nexport const SET_M = 'SET_M';\r\nexport const SET_N = 'SET_N';\r\nexport const SET_X = 'SET_X';\r\nexport const ADD_AMOUNT = 'ADD_AMOUNT';\r\nexport const ADD_ROW = 'ADD_ROW';\r\nexport const DELETE_ROW = 'DELETE_ROW';\r\nexport const SET_ROW_PERCENT_ARR = 'SET_ROW_PERCENT_ARR';\r\nexport const SET_CLOSE_VALUES_ARR = 'SET_CLOSE_VALUES_ARR';\r\nexport const SET_ROW_SUM = 'SET_ROW_SUM';\r\nexport const SET_COLUMN_SUM = 'SET_COLUMN_SUM';\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {setM, setX, setN, setTable} from '../redux/actions/tableActions';\r\n\r\nconst Form = ({ M, N, X, setM, setX, setN, setTable }) => {\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setTable(M, N)\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    switch (e.target.name) {\r\n      case 'm':\r\n        setM(e.target.value*1);\r\n        break;\r\n      case 'n':\r\n        setN(e.target.value*1);\r\n        break;\r\n      case 'x':\r\n        setX(e.target.value*1);\r\n        break;\r\n      default:\r\n\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className='form'>\r\n      <label>\r\n        M:\r\n        <input type=\"number\" min={0} value={M} name='m' onChange={handleChange} />\r\n      </label>\r\n\r\n      <label>\r\n        N:\r\n        <input type=\"number\" min={0} value={N} name='n' onChange={handleChange} />\r\n      </label>\r\n\r\n      <label>\r\n        X:\r\n        <input type=\"number\" min={0} value={X} name='x' onChange={handleChange} />\r\n      </label>\r\n\r\n      <input type=\"submit\" value=\"Build table\" />\r\n    </form>\r\n  );\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    M: state.table.M,\r\n    N: state.table.N,\r\n    X: state.table.X\r\n  }\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    setM, setX, setN, setTable\r\n  }\r\n)(Form)","const getCellAmount = (state, id) => state.table.rows[id].Amount;\r\n\r\nexport default getCellAmount;","const getTableCellAverageValueInColumn = (state, index) => Math.round(state.table.sumOfColumns[index].Value / state.table.M *100) /100;\r\n\r\nexport default getTableCellAverageValueInColumn;","const getRowSum = (state, index) => state.table.sumOfRows && state.table.sumOfRows.length > 0 ? state.table.sumOfRows[index] : null;\r\n\r\nexport default getRowSum;","const getIsCloseValue = (state, id) => state.table.arrayOfCloseValue[id];//.some(el => el.ID === id);\r\n\r\nexport default getIsCloseValue;","const getCellPercent = (state, id) => state.table.arrayOfRowPercent[id];\r\n\r\nexport default getCellPercent;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {getCellAmount, getIsCloseValue, getCellPercent} from \"../redux/selectors\";\r\n\r\nclass TableCell extends React.Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.props.percentValue !== nextProps.percentValue) {\r\n      return true\r\n    } else if (this.props.isClose !== nextProps.isClose) {\r\n      return true\r\n    } else if (this.props.cellAmount === nextProps.cellAmount) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log('componentDidUpdate')\r\n  }\r\n\r\n  render() {\r\n    const {cellAmount, isClose, percentValue, onclick, onmouseover/*, onmouseout*/} = this.props;\r\n\r\n    return (\r\n      <td\r\n        className={`tableCell ${isClose ? 'closeValue' : ''}`}\r\n        onClick={onclick}\r\n        onMouseOver={onmouseover}\r\n        // onMouseOut={onmouseout}\r\n\r\n        // onMouseEnter={onmouseover}\r\n        // onMouseLeave={onmouseout}\r\n      >\r\n        {\r\n          percentValue ? percentValue.percent : cellAmount\r\n        }\r\n        {\r\n          percentValue && <span\r\n            className=\"percent\"\r\n            style={{height: percentValue.percent}}\r\n          />\r\n        }\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n  cellAmount: getCellAmount(state, props.item),\r\n  isClose: getIsCloseValue(state, props.item),\r\n  percentValue: getCellPercent(state, props.item)\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(TableCell);","import React from 'react';\r\n\r\nconst TableCellBtn = ({classnames, onclick, value}) => {\r\n  return (\r\n    <td\r\n      className={classnames}\r\n      onClick={onclick}\r\n    >\r\n      {\r\n        value\r\n      }\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default React.memo(TableCellBtn);","import React from \"react\";\r\nimport {getTableCellAverageValueInColumn} from \"../redux/selectors\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass TableCellAverageValueInColumn extends React.Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.props.cellValue === nextProps.cellValue) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log('componentDidUpdate')\r\n  }\r\n\r\n  render() {\r\n    const {cellValue} = this.props;\r\n    return (\r\n      <td>\r\n        {\r\n          cellValue\r\n        }\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n  cellValue: getTableCellAverageValueInColumn(state, props.value)\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(TableCellAverageValueInColumn);","import React from \"react\";\r\nimport {getRowSum} from \"../redux/selectors\";\r\nimport {connect} from \"react-redux\";\r\n\r\nclass TableCellSumOfRow extends React.Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.props.sum === nextProps.sum) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    console.log('componentDidUpdate')\r\n  }\r\n\r\n  render() {\r\n    const {sum, onmouseover, onmouseout} = this.props;\r\n    return (\r\n      <td\r\n        onMouseOver={onmouseover}\r\n        onMouseOut={onmouseout}\r\n      >\r\n        {\r\n          sum\r\n        }\r\n      </td>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, props) => ({\r\n  sum: getRowSum(state, props.value)\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps\r\n)(TableCellSumOfRow);","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n  deleteRow,\r\n  addRow,\r\n  addAmount,\r\n  setRowPercentArr,\r\n  setCloseValue\r\n} from '../redux/actions/tableActions';\r\nimport TableCell from \"./TableCell\";\r\nimport TableCellBtn from \"./TableCellBtn\";\r\nimport TableCellAverageValueInColumn from \"./TableCellAverageValueInColumn\";\r\nimport TableCellSumOfRow from \"./TableCellSumOfRow\";\r\n\r\nconst Table = ({\r\n                 table,\r\n                 tableSumOfColumns,\r\n                 deleteRow,\r\n                 addRow,\r\n                 addAmount,\r\n                 setRowPercentArr,\r\n                 setCloseValue\r\n}) => {\r\n\r\n  const handleClickAdd = () => {\r\n    addRow()\r\n  };\r\n\r\n  const handleClickDelete = (index) => {\r\n    deleteRow(index)\r\n  };\r\n\r\n  const handleClickAddAmount = (index, idx, item) => {\r\n    addAmount(index, tableSumOfColumns[idx], item)\r\n  };\r\n\r\n  const handleOnmouseOverCell = (id) => {\r\n    setCloseValue(id)\r\n  };\r\n\r\n  const handleOnmouseLeaveCell = () => {\r\n    setCloseValue(null)\r\n  };\r\n\r\n  const handleOnmouseOverSum = (index, table) => {\r\n    setRowPercentArr(index, table);\r\n  };\r\n\r\n  const handleOnmouseLeaveSum = () => {\r\n    setRowPercentArr(null);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {\r\n        table.length > 0 &&\r\n        <table onMouseOut={handleOnmouseLeaveCell}>\r\n          <tbody>\r\n          {\r\n            table.map((row, index) => {\r\n              return (\r\n\r\n                <tr key={`table-row-${index}`}>\r\n                  {\r\n                    row.map((item, idx) => {\r\n                      return (\r\n                        <TableCell\r\n                          key={`table-cell-${item}`}\r\n                          onclick={() => handleClickAddAmount(index, idx, item)}\r\n                          onmouseover={() => handleOnmouseOverCell(item)}\r\n                          // onmouseout={handleOnmouseLeaveCell}\r\n                          item={item}\r\n                        />\r\n                      )\r\n                    })\r\n                  }\r\n                  <TableCellSumOfRow\r\n                    onmouseover={() => handleOnmouseOverSum(index, table[index])}\r\n                    onmouseout={handleOnmouseLeaveSum}\r\n                    value={index}\r\n                  />\r\n                  <TableCellBtn\r\n                    key={`del-btn-${index}`}\r\n                    classnames='delBtn'\r\n                    onclick={() => handleClickDelete(index)}\r\n                    value='Delete'\r\n                  />\r\n                </tr>\r\n              )\r\n            })\r\n          }\r\n          <tr>\r\n            {\r\n              tableSumOfColumns.map(item => {\r\n                return (\r\n                  <TableCellAverageValueInColumn\r\n                    key={`average-value-in-column-${item}`}\r\n                    value={item}\r\n                  />\r\n                )\r\n              })\r\n            }\r\n            <TableCellBtn\r\n              classnames='addBtn'\r\n              onclick={handleClickAdd}\r\n              value='Add'\r\n            />\r\n          </tr>\r\n          </tbody>\r\n        </table>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    table: state.table.table,\r\n    tableSumOfColumns: state.table.tableSumOfColumns\r\n  }\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    deleteRow,\r\n    addRow,\r\n    addAmount,\r\n    setRowPercentArr,\r\n    setCloseValue\r\n  }\r\n)(Table);//(React.memo(Table));","import React from 'react';\nimport Form from \"./components/Form\";\nimport Table from \"./components/Table\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form/>\n      <Table/>\n    </div>\n  );\n}\n\nexport default App;\n","import {\r\n  SET_M,\r\n  SET_N,\r\n  SET_X,\r\n  SET_TABLE,\r\n  DELETE_ROW,\r\n  ADD_ROW,\r\n  ADD_AMOUNT,\r\n  SET_ROW_PERCENT_ARR,\r\n  SET_CLOSE_VALUES_ARR,\r\n  SET_ROW_SUM,\r\n  SET_COLUMN_SUM\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n  table: [],\r\n  rows: {},\r\n  sumOfRows: [],\r\n  tableSumOfColumns: [],\r\n  sumOfColumns: {},\r\n  arrayOfRowPercent: {},\r\n  arrayOfCloseValue: {},\r\n  M: 0,\r\n  N: 0,\r\n  X: 0\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_M:\r\n      return {\r\n        ...state,\r\n        M: action.payload\r\n      };\r\n    case SET_N:\r\n      return {\r\n        ...state,\r\n        N: action.payload\r\n      };\r\n    case SET_X:\r\n      return {\r\n        ...state,\r\n        X: action.payload\r\n      };\r\n    case SET_CLOSE_VALUES_ARR:\r\n      return {\r\n        ...state,\r\n        arrayOfCloseValue: action.payload\r\n      };\r\n    case SET_TABLE:\r\n      return {\r\n        ...state,\r\n        rows: action.payload.rows,\r\n        table: action.payload.table\r\n      };\r\n    case SET_ROW_SUM:\r\n      return {\r\n        ...state,\r\n        sumOfRows: action.payload\r\n      };\r\n    case SET_COLUMN_SUM:\r\n      return {\r\n        ...state,\r\n        sumOfColumns: action.payload.columnArr,\r\n        tableSumOfColumns: action.payload.tableSumOfColumns\r\n      };\r\n    case DELETE_ROW:\r\n      return {\r\n        ...state,\r\n        rows: action.payload.newRow,\r\n        table: action.payload.newTable,\r\n        sumOfRows: action.payload.rowArr,\r\n        sumOfColumns: action.payload.columnArr\r\n      };\r\n    case ADD_ROW:\r\n      return {\r\n        ...state,\r\n        rows: action.payload.newRow,\r\n        table: action.payload.newTable,\r\n        cells: action.payload.cells,\r\n        sumOfRows: action.payload.rowArr,\r\n        sumOfColumns: action.payload.columnArr\r\n      };\r\n    case ADD_AMOUNT:\r\n      return {\r\n        ...state,\r\n        rows: action.payload.rows,\r\n        sumOfRows: action.payload.rowArr,\r\n        sumOfColumns: action.payload.columnArr\r\n      };\r\n    case SET_ROW_PERCENT_ARR:\r\n      return {\r\n        ...state,\r\n        arrayOfRowPercent: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","import { combineReducers } from 'redux';\r\nimport tableReducer from './tableReducer';\r\n\r\n\r\nexport default combineReducers({\r\n  table: tableReducer\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport App from './App';\nimport store from \"./redux/store\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}